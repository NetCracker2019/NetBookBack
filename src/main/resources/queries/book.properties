getBookList = \
  SELECT view_book_list.book_id, title, image_path, authors, favourite, reading, read_date, likes, release_date  \
  FROM view_book_list INNER JOIN user_book \
  ON user_book.book_id = view_book_list.book_id \
  WHERE user_id = :user_id and ((:reading \
  and reading) or (read_date is not null and :read) or \
  (:favourite and favourite) or (:not_set and read_date is null and not reading and not favourite)) \
  and (lower(title) like :sought \
  or EXISTS (SELECT FROM  unnest(authors) \
  author WHERE  lower(author) LIKE :sought)) \
  order by title \
  offset (:offset * :cnt) rows \
  fetch first :cnt row only;

addBookBatchToReading = \
  UPDATE user_book \
  SET reading = true, read_date = null \
  WHERE user_id = :user_id and book_id in (:booksId)

addBookBatchToRead = \
  UPDATE user_book \
  SET read_date = now()::timestamp, reading = false \
  WHERE user_id = :user_id and book_id in (:booksId)

addBookBatchToFavourite = \
  UPDATE user_book \
  SET favourite = true \
  WHERE user_id = :user_id and book_id in (:booksId)

removeBookBatchFromReading = \
  UPDATE user_book \
  SET reading = false \
  WHERE user_id = :user_id and book_id in (:booksId)

removeBookBatchFromRead = \
  UPDATE user_book \
  SET read_date = null \
  WHERE user_id = :user_id and book_id in (:booksId)

removeBookBatchFromFavourite = \
  UPDATE user_book \
  SET favourite = false \
  WHERE user_id = :user_id and book_id in (:booksId)

removeBookBatch = \
  DELETE FROM user_book \
  WHERE user_id = :user_id and book_id in (:booksId)

getAllBooks = SELECT * FROM view_book_list

findBooksByTitleOrAuthor = select * from view_book_list \
  WHERE lower(title) like :titleOrAuthor \
  or EXISTS (SELECT FROM  unnest(authors) \
  author WHERE lower(author) LIKE :titleOrAuthor) \
  AND approved = true \
  LIMIT :size \
  OFFSET :startIndex;

getAmountOfSearchResult = SELECT COUNT(book_id) \
  FROM view_book_list \
  WHERE lower(title) LIKE :titleOrAuthor \
  OR EXISTS (SELECT FROM unnest(authors) author \
  WHERE lower(author) LIKE :titleOrAuthor) \
  AND approved = true;

getBookById = select * from view_book_list where book_id = :id and approved = true;

getReviewsByBookId = select r.review_id r_id, \
    r.user_id u_id, r.book_id b_id, p.person_name u_name, p.avatar_filepath av_path, \
    r.review_text r_text, r.rating rating, r.approved appr from review r \
    inner join person p on r.user_id = p.person_id \
    where r.book_id = :bookId and r.approved = true;

#getUnApprove = SELECT announcment_id announcmentId, title, image_path imagePath, release_date releaseDate, description, authors, genres \
#    FROM view_announcement_list
getUnApprove = SELECT book_id announcmentId, title, image_path imagePath, release_date releaseDate, description, authors, genres \
    FROM view_book_list_un_approved \
    WHERE release_date >= now()\
    ORDER BY book_id \
    LIMIT :count OFFSET :offset;


getReviewPeaceByBookId = select r.review_id r_id, \
    r.user_id u_id, r.book_id b_id, p.person_name u_name, p.avatar_filepath av_path, \
    r.review_text r_text, r.rating rating, r.approved appr from review r \
    inner join person p on r.user_id = p.person_id \
    where r.book_id = :bookId and r.approved = true \
    order by r_id \
    limit :count offset :offset;

getPeaceOfSearchBooks = select * from view_book_list \
  WHERE lower(title) like :titleOrAuthor \
  or EXISTS (SELECT FROM  unnest(authors) \
  author WHERE  lower(author) LIKE :titleOrAuthor) and approved = true \
  order by title \
  limit :count offset :offset;

getPeaceOfBooks = select * from view_book_list \
  where approved = true \
  order by title \
  limit :count offset :offset

countBooks = select count(*) from view_book_list;
countReviews = select count(*) from review where approved = true;


findBooksByTitleAndGenre = SELECT * \
  FROM view_book_list \
  INNER JOIN book_genre USING (book_id) \
  WHERE lower(title) LIKE :title \
  AND genre_id = (SELECT genre_id FROM genre WHERE genre_name = :genre) \
  AND release_date BETWEEN :from AND :to \
  LIMIT :size \
  OFFSET :startIndex;

getAmountBooksByTitleAndGenre = SELECT COUNT(*) \
  FROM view_book_list \
  INNER JOIN book_genre USING (book_id) \
  WHERE lower(title) LIKE :title \
  AND genre_id = (SELECT genre_id FROM genre WHERE genre_name = :genre) \
  AND release_date BETWEEN :from AND :to;

findBooksByTitleAndAuthor = SELECT * \
  FROM view_book_list \
  INNER JOIN book_author USING (book_id) \
  WHERE lower(title) LIKE :title \
  AND author_id IN (SELECT author_id FROM author WHERE fullname = :author) \
  AND release_date BETWEEN :from AND :to \
  LIMIT :size \
  OFFSET :startIndex;

getAmountBooksByTitleAndAuthor = = SELECT COUNT(*) \
  FROM view_book_list \
  INNER JOIN book_author USING (book_id) \
  WHERE lower(title) LIKE :title \
  AND author_id IN (SELECT author_id FROM author WHERE fullname = :author) \
  AND release_date BETWEEN :from AND :to;

findBooksByTitleAndDate = SELECT DISTINCT book_id, title, authors, likes, image_path, release_date, lang, pages, genres, description, approved \
  FROM view_book_list \
  INNER JOIN book_author USING (book_id) \
  WHERE lower(title) LIKE :title \
  AND release_date BETWEEN :from AND :to \
  LIMIT :size \
  OFFSET :startIndex;

getAmountBooksByTitleAndDate = SELECT COUNT(DISTINCT book_id) \
  FROM view_book_list \
  INNER JOIN book_author USING (book_id) \
  WHERE lower(title) LIKE :title \
  AND release_date BETWEEN :from AND :to;

findBooksByTitleAuthorGenre = SELECT * \
  FROM view_book_list \
  INNER JOIN book_author USING (book_id) \
  INNER JOIN book_genre USING (book_id) \
  WHERE lower(title) LIKE :title \
  AND author_id IN (SELECT author_id FROM author WHERE fullname = :author) \
  AND genre_id = (SELECT genre_id FROM genre WHERE genre_name = :genre) \
  AND release_date BETWEEN :from AND :to \
  LIMIT :size \
  OFFSET :startIndex;

getAmountBooksByTitleAuthorGenre = SELECT COUNT(*) \
  FROM view_book_list \
  INNER JOIN book_author USING (book_id) \
  INNER JOIN book_genre USING (book_id) \
  WHERE lower(title) LIKE :title \
  AND author_id IN (SELECT author_id FROM author WHERE fullname = :author) \
  AND genre_id = (SELECT genre_id FROM genre WHERE genre_name = :genre) \
  AND release_date BETWEEN :from AND :to;


getCalendarAllAnnouncement = SELECT b.title, b.release_date date, b.book_id id \
FROM book AS b \
WHERE b.approved = true AND release_date >= now();

getUsersFavouriteAuthor = SELECT DISTINCT unnest(authors) as authors \
  FROM view_book_list as v \
  INNER JOIN user_book ub \
  ON ub.book_id = v.book_id \
  WHERE ub.user_id = :value;

getUsersFavouriteGenre = SELECT DISTINCT unnest(genres) as genres \
  FROM view_book_list as v \
  INNER JOIN user_book ub \
  ON ub.book_id = v.book_id \
  WHERE ub.user_id = :value;

getUsersFavouriteGenreAndAuthor = select distinct ba2.book_id \
from user_book ub \
join book_author ba1 ON ba1.book_id = ub.book_id \
join book_author ba2 ON ba1.author_id = ba2.author_id \
WHERE ub.user_id = :value \
\
union \
\
select distinct bg2.book_id \
from user_book ub \
join book_genre bg1 ON bg1.book_id = ub.book_id \
join book_genre bg2 ON bg1.genre_id = bg2.genre_id \
WHERE ub.user_id = :value;

getPersonilizeAnnouncement = select title, release_date date, book_id id \
    from view_book_list \
    where release_date >= (CURRENT_DATE - 30) AND (genres && :genres ::varchar[] or authors && :authors ::varchar[]);

getPersonilizeAnnouncementNew = select title, release_date date, book_id id \
    from view_book_list \
    where release_date >= (CURRENT_DATE - 30) AND book_id = :id;


countBooksForUser =  select count(*) from user_book where user_id = :userId;
addBookToProfile = insert into user_book (user_id, book_id, reading, favourite) values (:userId, :bookId, false, false);
checkBookInProfile = select count(*) from user_book where user_id = :userId and book_id = :bookId;
removeBookFromProfile = delete from user_book where user_id = :userId and book_id = :bookId;

countUnApproveAnnouncement = SELECT count(*) FROM book WHERE approved = :approved AND release_date >= now();

addBook = INSERT INTO book (title, likes, image_path, release_date, lang, pages, description, approved, user_id) \
          values(:title, :likes, :image_path, TO_DATE(:release_date, 'yyyy-mm-dd'), :lang, :pages, :description, :approved, :user_id);

checkDuplicates = SELECT COUNT(*) \
                  FROM book \
                  WHERE title = :title and description = :description;

addRowIntoBookGenre = INSERT INTO book_genre (book_id, genre_id) \
                      VALUES ((select book_id from book where title = :title AND description = :description), :item ::int);

addRowIntoBookAuthor = INSERT INTO book_author (book_id, author_id) values ((select book_id from book where title = :title AND description = :description), (select author_id from author where fullname = :fullname));

addAuthor = INSERT INTO author (fullname) values (:fullname);

isThisAuthorExist = SELECT exists(SELECT 1 FROM author WHERE fullname= :fullname)